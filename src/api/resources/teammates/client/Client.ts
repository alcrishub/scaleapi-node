/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../environments";
import * as core from "../../../../core";
import { ScaleApi } from "@fern-api/scale";
import urlJoin from "url-join";
import * as serializers from "../../../../serialization";
import * as errors from "../../../../errors";

export declare namespace Client {
    interface Options {
        environment?: environments.ScaleApiEnvironment | string;
        token?: core.Supplier<core.BearerToken>;
    }
}

export class Client {
    constructor(private readonly options: Client.Options) {}

    /**
     * Retrieves basic information about all team members associate with your account.
     */
    public async list(): Promise<ScaleApi.Teammate[]> {
        const _response = await core.fetcher({
            url: urlJoin(this.options.environment ?? environments.ScaleApiEnvironment.Production, "/teams"),
            method: "GET",
            headers: {
                Authorization: core.BearerToken.toAuthorizationHeader(await core.Supplier.get(this.options.token)),
            },
        });
        if (_response.ok) {
            return await serializers.teammates.list.Response.parse(
                _response.body as serializers.teammates.list.Response.Raw
            );
        }

        if (_response.error.reason === "status-code") {
            throw new errors.ScaleApiError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.ScaleApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.ScaleApiTimeoutError();
            case "unknown":
                throw new errors.ScaleApiError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Invites one or multiple users by email to your team. `team_role` can be either `labeler`, `member`, or `manager`. Returns information about all team members.
     */
    public async invite(request: ScaleApi.TeamsInvite): Promise<void> {
        const _response = await core.fetcher({
            url: urlJoin(this.options.environment ?? environments.ScaleApiEnvironment.Production, "/teams/invite"),
            method: "POST",
            headers: {
                Authorization: core.BearerToken.toAuthorizationHeader(await core.Supplier.get(this.options.token)),
            },
            body: await serializers.TeamsInvite.json(request),
        });
        if (_response.ok) {
            return;
        }

        if (_response.error.reason === "status-code") {
            throw new errors.ScaleApiError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.ScaleApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.ScaleApiTimeoutError();
            case "unknown":
                throw new errors.ScaleApiError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Changes the role of non-admin team members. `emails` should be a list of emails of team members who are either labelers, members, managers, or disabled. `team_role` should be one of `labeler`, `member`, or `manager`. Returns information about all members of your team.
     */
    public async updateRole(request: ScaleApi.TeamsInvite): Promise<void> {
        const _response = await core.fetcher({
            url: urlJoin(this.options.environment ?? environments.ScaleApiEnvironment.Production, "/teams/set_role"),
            method: "POST",
            headers: {
                Authorization: core.BearerToken.toAuthorizationHeader(await core.Supplier.get(this.options.token)),
            },
            body: await serializers.TeamsInvite.json(request),
        });
        if (_response.ok) {
            return;
        }

        if (_response.error.reason === "status-code") {
            throw new errors.ScaleApiError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.ScaleApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.ScaleApiTimeoutError();
            case "unknown":
                throw new errors.ScaleApiError({
                    message: _response.error.errorMessage,
                });
        }
    }
}
