/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../environments";
import * as core from "../../../../core";
import { ScaleApi } from "@fern-api/scale";
import urlJoin from "url-join";
import * as serializers from "../../../../serialization";
import * as errors from "../../../../errors";

export declare namespace Client {
    interface Options {
        environment?: environments.ScaleApiEnvironment | string;
        token?: core.Supplier<core.BearerToken>;
    }
}

export class Client {
    constructor(private readonly options: Client.Options) {}

    /**
     * This API endpoint retrieves a specific task.
     */
    public async get(taskId: string): Promise<ScaleApi.Task> {
        const _response = await core.fetcher({
            url: urlJoin(this.options.environment ?? environments.ScaleApiEnvironment.Production, `task/${taskId}`),
            method: "GET",
            headers: {
                Authorization: core.BearerToken.toAuthorizationHeader(await core.Supplier.get(this.options.token)),
            },
        });
        if (_response.ok) {
            return await serializers.Task.parse(_response.body as serializers.Task.Raw);
        }

        if (_response.error.reason === "status-code") {
            throw new errors.ScaleApiError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.ScaleApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.ScaleApiTimeoutError();
            case "unknown":
                throw new errors.ScaleApiError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * This is a paginated endpoint that retrieves a list of your tasks. The tasks will be returned in descending order based on `created_at` time. All time filters expect an [ISO 8601-formatted string](https://timestampgenerator.com/), like '2021-04-25' or '2021-04-25T03:14:15-07:00' The pagination is based on the `limit` and `next_token` parameters, which determine the page size and the current page we are on. The value of `next_token` is a unique pagination token for each page ([nerdy details if you were curious](https://www.mixmax.com/engineering/api-paging-built-the-right-way/)). Make the call again using the returned token to retrieve the next page.
     */
    public async list(request: ScaleApi.ListTasksRequest = {}): Promise<ScaleApi.ListTasksResponse> {
        const {
            startTime,
            endTime,
            completedAfter,
            completedBefore,
            updatedAfter,
            updatedBefore,
            status,
            type,
            project,
            batch,
            limit,
            includeAttachmentUrl,
            nextToken,
        } = request;
        const _queryParams = new URLSearchParams();
        if (startTime != null) {
            _queryParams.append("start_time", startTime);
        }

        if (endTime != null) {
            _queryParams.append("end_time", endTime);
        }

        if (completedAfter != null) {
            _queryParams.append("completed_after", completedAfter);
        }

        if (completedBefore != null) {
            _queryParams.append("completed_before", completedBefore);
        }

        if (updatedAfter != null) {
            _queryParams.append("updated_after", updatedAfter);
        }

        if (updatedBefore != null) {
            _queryParams.append("updated_before", updatedBefore);
        }

        if (status != null) {
            _queryParams.append("status", status);
        }

        if (type != null) {
            _queryParams.append("type", type);
        }

        if (project != null) {
            _queryParams.append("project", project);
        }

        if (batch != null) {
            _queryParams.append("batch", batch);
        }

        if (limit != null) {
            _queryParams.append("limit", limit.toString());
        }

        if (includeAttachmentUrl != null) {
            _queryParams.append("include_attachment_url", includeAttachmentUrl.toString());
        }

        if (nextToken != null) {
            _queryParams.append("next_token", nextToken);
        }

        const _response = await core.fetcher({
            url: urlJoin(this.options.environment ?? environments.ScaleApiEnvironment.Production, "tasks"),
            method: "GET",
            headers: {
                Authorization: core.BearerToken.toAuthorizationHeader(await core.Supplier.get(this.options.token)),
            },
            queryParameters: _queryParams,
        });
        if (_response.ok) {
            return await serializers.ListTasksResponse.parse(_response.body as serializers.ListTasksResponse.Raw);
        }

        if (_response.error.reason === "status-code") {
            throw new errors.ScaleApiError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.ScaleApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.ScaleApiTimeoutError();
            case "unknown":
                throw new errors.ScaleApiError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * This endpoint cancels a task so that it will not be completed. You may only cancel pending tasks, and the endpoint will return a 400 error code if you attempt to cancel a completed task If the task to be cancled had a unique id, specifying `clear_unique_id=true` will remove the unique id.  Canceling tasks is idempotent such that calling this endpoint multiple times will still return a 200 success response.
     */
    public async cancel(taskId: string, request: ScaleApi.CancelTasksRequest = {}): Promise<ScaleApi.Task> {
        const { clearUniqueId } = request;
        const _queryParams = new URLSearchParams();
        if (clearUniqueId != null) {
            _queryParams.append("clear_unique_id", clearUniqueId);
        }

        const _response = await core.fetcher({
            url: urlJoin(
                this.options.environment ?? environments.ScaleApiEnvironment.Production,
                `task/${taskId}/cancel`
            ),
            method: "POST",
            headers: {
                Authorization: core.BearerToken.toAuthorizationHeader(await core.Supplier.get(this.options.token)),
            },
            queryParameters: _queryParams,
        });
        if (_response.ok) {
            return await serializers.Task.parse(_response.body as serializers.Task.Raw);
        }

        if (_response.error.reason === "status-code") {
            throw new errors.ScaleApiError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.ScaleApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.ScaleApiTimeoutError();
            case "unknown":
                throw new errors.ScaleApiError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * This endpoint sets the `metadata` field on a task. You may set the `metadata` field on any existing task using valid key-value data. Updating a task's `metadata` field is idempotent such that calling this endpoint multiple times will still return a 200 success response.
     */
    public async setMetadata(taskId: string, request: ScaleApi.SetTaskMetadataRequest): Promise<ScaleApi.Task> {
        const _response = await core.fetcher({
            url: urlJoin(
                this.options.environment ?? environments.ScaleApiEnvironment.Production,
                `task/${taskId}/setMetadata`
            ),
            method: "POST",
            headers: {
                Authorization: core.BearerToken.toAuthorizationHeader(await core.Supplier.get(this.options.token)),
            },
            body: await serializers.SetTaskMetadataRequest.json(request),
        });
        if (_response.ok) {
            return await serializers.Task.parse(_response.body as serializers.Task.Raw);
        }

        if (_response.error.reason === "status-code") {
            throw new errors.ScaleApiError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.ScaleApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.ScaleApiTimeoutError();
            case "unknown":
                throw new errors.ScaleApiError({
                    message: _response.error.errorMessage,
                });
        }
    }
}
