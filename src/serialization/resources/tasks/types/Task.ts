/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../..";
import { Scale } from "@fern-api/scale";
import * as core from "../../../../core";

export const Task: core.serialization.ObjectSchema<serializers.Task.Raw, Scale.Task> = core.serialization.object({
    taskId: core.serialization.property("task_id", core.serialization.string().optional()),
    createdAt: core.serialization.property("created_at", core.serialization.string().optional()),
    callbackUrl: core.serialization.property("callback_url", core.serialization.string().optional()),
    type: core.serialization.string().optional(),
    status: core.serialization.string().optional(),
    instruction: core.serialization.string().optional(),
    params: core.serialization.lazyObject(async () => (await import("../../..")).TaskParams).optional(),
    metadata: core.serialization.record(core.serialization.string(), core.serialization.unknown()).optional(),
});

export declare namespace Task {
    interface Raw {
        task_id?: string | null;
        created_at?: string | null;
        callback_url?: string | null;
        type?: string | null;
        status?: string | null;
        instruction?: string | null;
        params?: serializers.TaskParams.Raw | null;
        metadata?: Record<string, unknown> | null;
    }
}
